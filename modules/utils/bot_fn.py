import re
from datetime import timedelta, datetime
from types import SimpleNamespace
from typing import Optional, List, Tuple, Dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from typing import Optional, List, Tuple, Dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import secrets
import string
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

async def inline_menu(**kwargs) -> InlineKeyboardMarkup:
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    --------------------------------
    - message_markup (InlineKeyboardMarkup):
        –ò—Å—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å.
        –ü—Ä–∏–º–µ—Ä: message_markup=message.reply_markup

    - replace_text (Dict[str, str]):
        –ó–∞–º–µ–Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ –¢–ï–ö–°–¢–ï –∫–Ω–æ–ø–æ–∫. –§–æ—Ä–º–∞—Ç: {"—Å—Ç–∞—Ä–∞—è_—Å—Ç—Ä–æ–∫–∞": "–Ω–æ–≤–∞—è_—Å—Ç—Ä–æ–∫–∞"}
        –ü—Ä–∏–º–µ—Ä: replace_text={"üü•": "‚úÖ", "–û—Ç–º–µ–Ω–∞": "–ó–∞–∫—Ä—ã—Ç—å"}

    - replace_data (Dict[str, str]):
        –ó–∞–º–µ–Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ CALLBACK_DATA –∫–Ω–æ–ø–æ–∫. –§–æ—Ä–º–∞—Ç: {"—Å—Ç–∞—Ä–∞—è_—Å—Ç—Ä–æ–∫–∞": "–Ω–æ–≤–∞—è_—Å—Ç—Ä–æ–∫–∞"}
        –ü—Ä–∏–º–µ—Ä: replace_data={"show": "hide", "temp_": "perm_"}

    - remove_buttons (List[Dict[str, str]]):
        –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫. –ö–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –û–î–ò–ù –∫—Ä–∏—Ç–µ—Ä–∏–π:
        [
            {"text": "üö´"},                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            {"callback_data": "block:"},       # callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å...
            {"url": "https://example.com"}     # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ URL
        ]
        –£–¥–∞–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –õ–Æ–ë–û–ú–£ –∏–∑ –ø—Ä–∞–≤–∏–ª.

    - line_{N} (List[Tuple[str, str]]):
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏. –ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1.
        –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: (—Ç–µ–∫—Å—Ç, –¥–∞–Ω–Ω—ã–µ), –≥–¥–µ –¥–∞–Ω–Ω—ã–µ - callback_data –∏–ª–∏ URL.
        –ü—Ä–∏–º–µ—Ä:
        line_1=[("‚ù§Ô∏è", "like"), ("üîó", "https://example.com")]

    - width_{N} (int):
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π line_{N}.
        –ü—Ä–∏–º–µ—Ä: width_1=2 ‚Üí –∫–Ω–æ–ø–∫–∏ line_1 –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ 2 –∫–æ–ª–æ–Ω–∫–∏

    - merge_line_{N} (List[Tuple[str, str]]):
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–æ–π –Ω–æ–º–µ—Ä N.
        –ü—Ä–∏–º–µ—Ä: merge_line_2=[("‚ûï", "add")] –¥–æ–±–∞–≤–∏—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ 2-–π —Å—Ç—Ä–æ–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ–Ω—é

    - merge_width_{N} (int):
        –®–∏—Ä–∏–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è merge_line_{N}.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------------------------------
    InlineKeyboardMarkup - –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    --------------------------------
    1. –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö:
    await inline_menu(
        message_markup=existing_markup,
        remove_buttons=[{"text": "‚á£"}],
        line_1=[("üÜï", "new_button")],
        width_1=2
    )

    2. –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö:
    await inline_menu(
        message_markup=existing_markup,
        replace_text={"üëÄ": "üëÅÔ∏è"},
        replace_data={"view": "preview"},
        merge_line_1=[("‚úÖ", "confirm")],
        merge_width_1=3
    )

    3. –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    await inline_menu(
        message_markup=existing_markup,
        remove_buttons=[{"callback_data": "old_cmd"}],
        replace_data={"edit_": "update_"},
        line_1=[("üìù", "edit_text"), ("üñº", "edit_image")],
        width_1=2,
        line_2=[("üóë", "delete")],
        width_2=1
    )

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:
    --------------------------------
    4. –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
        - –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        - –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞/–¥–∞–Ω–Ω—ã—Ö
        - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ (merge_line)
        - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ (line_*)

    5. –î–ª—è URL-–∫–Ω–æ–ø–æ–∫:
        - –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://
        - –ù–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∑–∞–º–µ–Ω–µ callback_data

    6. –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ:
        - –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –∏–∑ line_* –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """

    async def build_keyboard(buttons: List[Tuple[str, str]], row_width: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        for text, data in buttons:
            if data.startswith(('http://', 'https://')):
                builder.button(text=text, url=data)
            else:
                builder.button(text=text, callback_data=data)
        builder.adjust(row_width)
        return builder.as_markup()

    replace_text = kwargs.pop('replace_text', {})
    replace_data = kwargs.pop('replace_data', {})
    remove_rules = kwargs.pop('remove_buttons', [])
    existing_markup = kwargs.pop('message_markup', None)
    combined_keyboard = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω—é
    if existing_markup and isinstance(existing_markup, InlineKeyboardMarkup):
        for row in existing_markup.inline_keyboard:
            new_row = []
            for button in row:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                remove = False
                for rule in remove_rules:
                    rule_matches = True
                    if 'text' in rule and rule['text'] != button.text:
                        rule_matches = False
                    if 'callback_data' in rule and (not button.callback_data or not button.callback_data.startswith(rule['callback_data'])):
                        rule_matches = False
                    if 'url' in rule and rule['url'] != button.url:
                        rule_matches = False
                    if rule_matches:
                        remove = True
                        break
                if remove:
                    continue

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
                new_text = button.text
                for old, new in replace_text.items():
                    new_text = new_text.replace(old, new)

                if button.callback_data:
                    new_data = button.callback_data
                    for old, new in replace_data.items():
                        new_data = new_data.replace(old, new)
                    new_button = InlineKeyboardButton(text=new_text, callback_data=new_data)
                elif button.url:
                    new_button = InlineKeyboardButton(text=new_text, url=button.url)
                else:
                    continue

                new_row.append(new_button)

            if new_row:
                combined_keyboard.append(new_row)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–∏–Ω–∏–π
    i = 1
    while True:
        line_key = f'line_{i}'
        width_key = f'width_{i}'
        buttons = kwargs.get(line_key)
        if not isinstance(buttons, list):
            break
        row_width = kwargs.get(width_key, 1)
        menu = await build_keyboard(buttons, row_width)
        combined_keyboard.extend(menu.inline_keyboard)
        i += 1

    return InlineKeyboardMarkup(inline_keyboard=combined_keyboard)


def generate_secure_uuid(length=12):
    characters = string.ascii_letters + string.digits
    return ''.join(secrets.choice(characters) for _ in range(length))

async def hyperformula(link, capture, cap_type):
    if cap_type == 'text':
        return f'=HYPERLINK("{link}"; "{capture}")'
    elif cap_type == 'picture':
        return f'=HYPERLINK("{link}"; IMAGE("{capture}"; 2))'

def format_time(time_str):
    pattern = r'^(?:\d{2}:\d{2}|\d{4})$'
    if not re.match(pattern, time_str):
        return None

    if ':' in time_str:
        hours, minutes = map(int, time_str.split(':'))
    else:
        hours, minutes = int(time_str[:2]), int(time_str[2:])

    if 0 <= hours < 24 and 0 <= minutes < 60:
        return f"{hours:02d}:{minutes:02d}"

    return None


async def get_series(dates):
    date_objects = sorted(set(datetime.strptime(date, "%Y-%m-%d") for date in dates))
    max_streak = 1
    current_streak = 1
    for i in range(1, len(date_objects)):
        if date_objects[i] - date_objects[i - 1] == timedelta(days=1):
            current_streak += 1
            max_streak = max(max_streak, current_streak)
        else:
            current_streak = 1
    today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
    dates_set = set(date_objects)
    current_day = today
    last_streak = 0
    if today in dates_set:
        while current_day in dates_set:
            last_streak += 1
            current_day -= timedelta(days=1)
    elif (today - timedelta(days=1)) in dates_set:
        current_day = today - timedelta(days=1)
        while current_day in dates_set:
            last_streak += 1
            current_day -= timedelta(days=1)
    else:
        last_streak = 0
    return SimpleNamespace(max_streak=max_streak, last_streak=last_streak)

async def keyboard_menu(**kwargs):

	#–ü—Ä–∏–º–µ—Ä
	#markup = await reply_menu(
    #line_1=(["–ö–æ–º–∞–Ω–¥–∞ 1"], 1),
    #line_2=(["–ö–æ–º–∞–Ω–¥–∞ 2"], 1),
    #line_3=(["–ö–æ–º–∞–Ω–¥–∞ 3", "–ö–æ–º–∞–Ω–¥–∞ 4", "–ö–æ–º–∞–Ω–¥–∞ 5"], 3))

    keyboard = []

    for value in kwargs.values():
        if not isinstance(value, tuple) or len(value) != 2:
            continue
        commands, width = value

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —à–∏—Ä–∏–Ω–µ (width)
        for i in range(0, len(commands), width):
            row = [KeyboardButton(text=cmd) for cmd in commands[i:i + width]]
            keyboard.append(row)

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)