import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from modules.handlers.start_handler import router as start_router
from modules.handlers.last_handler import router as last_router
from modules.utils.db import creator, ensure_database_exists

# –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã
BOT_TOKENS = ['', '']

async def start_bot(token):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –±–æ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    bot = Bot(token=token, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML, 
        link_preview_is_disabled=True
    ))
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start_router)
    dp.include_router(last_router)
    
    try:
        await bot.delete_webhook()
        print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {token[:10]}...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞ {token[:10]}: {e}")
    finally:
        await bot.session.close()

async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    await ensure_database_exists()
    await creator(table='users', column_types={
        'user_id': 'INTEGER', 
        'topic_id': 'INTEGER', 
        'username': 'TEXT',
        'first_name': 'TEXT', 
        'last_name': 'TEXT', 
        'source': 'TEXT', 
        'is_admin': 'INTEGER', 
        'is_moderator': 'INTEGER', 
        'banned': 'INTEGER',
        'tariff': 'TEXT', 
        'bot_username': 'TEXT', 
        'bot_id': 'INTEGER'
    })

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await create_tables()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã
    valid_tokens = [token for token in BOT_TOKENS if token.strip()]
    
    if not valid_tokens:
        print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
        print("üìù –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ BOT_TOKENS")
        return
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {len(valid_tokens)} –±–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    tasks = [asyncio.create_task(start_bot(token)) for token in valid_tokens]
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("ü§ñ –ú—É–ª—å—Ç–∏-–±–æ—Ç —Å–∏—Å—Ç–µ–º–∞ TableMan")
    print("=" * 40)
    asyncio.run(main())
