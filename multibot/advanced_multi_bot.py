import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from modules.handlers.start_handler import router as start_router
from modules.handlers.last_handler import router as last_router
from modules.utils.db import creator, ensure_database_exists
from bot_config import BOT_TOKENS, DATABASE_CONFIG, BOT_SETTINGS, LOGGING_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOGGING_CONFIG['level']),
    format=LOGGING_CONFIG['format']
)
logger = logging.getLogger(__name__)

class AdvancedMultiBotRunner:
    def __init__(self):
        self.bots = []
        self.dispatchers = []
        self.running_tasks = []
        
    async def create_bot_instance(self, token, bot_id):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID"""
        bot = Bot(
            token=token, 
            default=DefaultBotProperties(
                parse_mode=getattr(ParseMode, BOT_SETTINGS['parse_mode']),
                link_preview_is_disabled=BOT_SETTINGS['link_preview_disabled']
            )
        )
        
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(start_router)
        dp.include_router(last_router)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –±–æ—Ç #{bot_id} —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")
        return bot, dp
    
    async def start_single_bot(self, bot, dp, bot_id):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –±–æ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if BOT_SETTINGS['delete_webhook_on_start']:
                await bot.delete_webhook()
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ #{bot_id}")
            await dp.start_polling(bot)
            
        except asyncio.CancelledError:
            logger.info(f"‚èπÔ∏è  –ë–æ—Ç #{bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ #{bot_id}: {e}")
        finally:
            try:
                await bot.session.close()
                logger.info(f"üîí –°–µ—Å—Å–∏—è –±–æ—Ç–∞ #{bot_id} –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ #{bot_id}: {e}")
    
    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await ensure_database_exists()
            
            for table_name, columns in DATABASE_CONFIG['tables'].items():
                await creator(table=table_name, column_types=columns)
                logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –≥–æ—Ç–æ–≤–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
            raise
    
    async def run_all_bots(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.setup_database()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        valid_tokens = [token for token in BOT_TOKENS if token and token.strip()]
        
        if not valid_tokens:
            logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
            return
        
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ {len(valid_tokens)} –±–æ—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
        for i, token in enumerate(valid_tokens, 1):
            try:
                bot, dp = await self.create_bot_instance(token, i)
                self.bots.append(bot)
                self.dispatchers.append(dp)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –±–æ—Ç–∞
                task = asyncio.create_task(
                    self.start_single_bot(bot, dp, i),
                    name=f"bot_{i}"
                )
                self.running_tasks.append(task)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ #{i}: {e}")
        
        if not self.running_tasks:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞!")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(*self.running_tasks, return_exceptions=True)
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–æ–≤...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.running_tasks:
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if self.running_tasks:
            await asyncio.gather(*self.running_tasks, return_exceptions=True)
        
        logger.info("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Advanced Multi-Bot System –¥–ª—è TableMan")
    print("=" * 50)
    
    runner = AdvancedMultiBotRunner()
    await runner.run_all_bots()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
